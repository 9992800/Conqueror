package com.jctx.chat.module;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.json.JSONArray;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.connection.jedis.JedisConnection;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPubSub;


public class MessageReaderPipe extends Thread{
	
	private static final Logger logger =
		    LoggerFactory.getLogger(MessageReaderPipe.class);
	RedisConnection subconn;
	
	Jedis subscriber;
	
	JedisConnectionFactory jedisFactory;
	
	private JedisPubSub pubsub;
	
	OnlineBean bean;
	
	public MessageReaderPipe(JedisConnectionFactory jedisFactory, JedisPubSub pubsub, OnlineBean bean) {
		this.jedisFactory = jedisFactory;
		this.bean = bean;		
		this.pubsub = pubsub;
		
		subconn =  jedisFactory.getConnection();		
		subscriber = ((JedisConnection)subconn).getNativeConnection();
	}

	public void online(WebSocketSession session, OnlineBean bean) {
		try{			
			List<String> unread_messages = this.getUnreadMessage(bean);
			
			this.sendToClient(session, unread_messages);
			
			this.start();
			
		}catch(Exception e){			
			e.printStackTrace();			
		}finally {			
			subconn.close();			
		}
	}

	private void sendToClient(WebSocketSession session, List<String> unread_messages) throws IOException {
		if (unread_messages.size() == 0){
			return ;
		}
		
		JSONArray jsonMsgs = new JSONArray(unread_messages);
		
		String msgs = jsonMsgs.toString();
		
		session.sendMessage(new TextMessage(msgs));
	}

	private List<String> getUnreadMessage(OnlineBean bean) {
		
		List<String> unread_messages = new ArrayList<>();
		unread_messages = subscriber.lrange(bean.getSelf(), 0, -1);
		
		
		Set<String> system_messages = subscriber.zrangeByScore(OnlineBean.SYSTEM_CHANNEL,
				bean.getSystem(), System.currentTimeMillis()/1000);
		
		unread_messages.addAll(system_messages);
		return unread_messages;
	}

	public void close() {		
		this.pubsub.unsubscribe(); 
	}

	@Override
	public void run() {
		subscriber.subscribe(this.pubsub, this.bean.getSelf(), OnlineBean.SYSTEM_CHANNEL);
		logger.info("Tread id:"+this.getId()+" destroyed");
	}
}
